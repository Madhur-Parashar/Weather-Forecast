{"version":3,"sources":["components/Landing/Landing.js","components/Chart/Chart.js","utility/utility.js","App.js","serviceWorker.js","index.js"],"names":["Landing","props","state","city","onInputChange","bind","handleShowChart","event","this","setState","target","value","history","push","pathname","className","onChange","placeholder","onClick","React","Component","withRouter","Chart","data","loaded","errorMessage","populateData","list","temperature","map","item","moment","dt_txt","format","main","temp","title","pressure","humidity","axios","get","match","params","then","response","console","log","catch","error","finally","index","key","responsive","containerComponent","voronoiDimension","labels","datum","x","labelComponent","cornerRadius","flyoutStyle","fill","text","y","textAnchor","style","stroke","parent","border","goBack","App","exact","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.69e255a3.chunk.js","sourcesContent":["import React from \"react\";\nimport { withRouter } from 'react-router';\nimport \"./landing.css\"\n\nclass Landing extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            city:''\n        }\n        this.onInputChange = this.onInputChange.bind(this);\n        this.handleShowChart = this.handleShowChart.bind(this)\n    }\n    onInputChange(event){\n        this.setState({\n            city: event.target.value\n        })\n    }\n    handleShowChart(){\n        this.props.history.push({pathname:'/chart/'+this.state.city})\n    }\n    render(){\n        return(\n            <div className=\"b-landing\">\n                <input value={this.state.city} onChange={this.onInputChange} placeholder=\"Please enter city\"/>\n                <button onClick={this.handleShowChart} className=\"b-btn-get-forecast__cta\">\n                    Get the forecast\n                </button>\n            </div>\n        )\n        \n        \n    }\n}\n\nexport default withRouter(Landing)","import React from \"react\";\nimport { withRouter } from 'react-router';\nimport axios from \"axios\";\nimport apiId from \"../../utility/utility\"\nimport { VictoryLine,VictoryTooltip ,VictoryChart,VictoryVoronoiContainer, VictoryLabel} from 'victory';\nimport moment from \"moment\";\nimport \"./chart.css\"\n\nclass Chart extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state={\n            data:[],\n            loaded:false,\n            errorMessage:false\n        }\n        this.populateData = this.populateData.bind(this)\n    }\n\n    populateData(list){\n        let temperature =  list.map(item=>{\n            return {'x':moment(item.dt_txt).format(\"D MMM HH:mm\"),'y':item.main.temp,title:'Temperature'}\n              \n          })\n        let pressure =  list.map(item=>{\n            return {'x':moment(item.dt_txt).format(\"D MMM HH:mm\"),'y':item.main.pressure,title:'Pressure'}\n              \n          })\n        let humidity =  list.map(item=>{\n            return {'x':moment(item.dt_txt).format(\"D MMM HH:mm\"),'y':item.main.humidity,title:'Humidity'}\n              \n          })\n       this.setState({\n           data: [temperature,pressure,humidity]\n       })\n    }\n  \n    componentDidMount(){       \n        axios.get(`http://api.openweathermap.org/data/2.5/forecast/?q=${this.props.match.params.city}&appid=${apiId}`)\n        .then( (response) =>{\n            // handle success\n            console.log(response.data);\n            this.populateData(response.data.list)\n          \n        })\n        .catch( (error)=> {\n            // handle error\n            this.setState({\n                errorMessage:true\n            })\n        })\n        .finally( ()=> {\n            this.setState({\n                loaded:true\n            })\n        });\n    }\n    render(){\n    \n        return(\n            <div>\n                \n                { this.state.loaded ?\n                <div className=\"b-chart\">\n                    {this.state.errorMessage ?\n                    <div>\n                        City Not Found. Please enter correct city\n                    </div> :  \n                     this.state.data.map((item,index)=>\n                        <div className=\"b-chart__main\" key={index}>\n                        <VictoryChart \n                          responsive={true}\n                          containerComponent={\n                            <VictoryVoronoiContainer voronoiDimension=\"x\"\n                              labels={({ datum }) => `y: ${datum.x}`}\n                              labelComponent={<VictoryTooltip cornerRadius={0} flyoutStyle={{fill: \"white\"}}/>}\n                            />\n                          }         \n                          >\n                         <VictoryLabel text={item[0].title} x={225} y={30} textAnchor=\"middle\"/>\n                          <VictoryLine\n                              style={{\n                              data: { stroke: \"#c43a31\" },\n                              parent: { border: \"1px solid #ccc\"}\n                              }}\n                              data={item}\n                              x={1}\n           \n                          />\n                          <VictoryLabel/>\n                          \n                          </VictoryChart>\n                        </div>\n                    )}\n                    <button onClick={this.props.history.goBack} className=\"b-chart-go-back__cta\">Go back</button>\n                </div>\n                \n                 :'Loading...'\n                }\n               \n              \n            </div>\n        )\n        \n        \n    }\n}\n\nexport default withRouter(Chart)"," const apiId = 'b716a9f2515583ebe3a911e91b3a990c'\n\n export default apiId;","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Route\n} from \"react-router-dom\";\n\nimport Landing from \"./components/Landing/Landing\";\nimport Chart from \"./components/Chart/Chart\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <h1>Weather Forecast</h1>\n      <Route exact path=\"/\">\n            <Landing />\n      </Route>\n      <Route path=\"/chart/:city\">\n            <Chart />\n      </Route>\n      </div>\n    </Router>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}